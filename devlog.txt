3 Lucky Duckies
Ziying Jian
Gloria Lee
Nora Miller
pd 8
---------------------
Chain Reaction

 Qs:
 - Why do we have an error specifically with 2x3 grids? Is it a bug in the code with how rows/cols are treated?
 - How do try-catch loops work exactly?
 - What is considered "clean code"? And how can we best and most efficiently clean up?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Catching exceptions in user input using a try-catch loop

* Stack Overflow errors on a 3x3 grid 
SOLVED BY: Added checkWin() to check after every explosion instead of until
all the explosions have ended.
LEARNED: Take a breath to stop coding. After a trace, we discovered 
that a 3x3 grid is too small and the reactions would kept going nonstop, no 
matter what we had done.
Had we kept trying to tackle the issue head on without stopping to trace,
we would not have completed the project.

* Fixed the bug with 2x3 grids

* Fixed a bug where you couldn't place a dot in a previously exploded spot

* Array out of bounds


UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Our code struggles with computing large number of chain reactions. 
After the reactions, dots may be misplaced.

* How to implement some kind of border frame our
game?

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Discovered terminal colors  
* Creating a grid

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tales of wisdom gained...
* The try-catch loop is used to catch errors that affect the type



 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
==============================================================


 2022-01-16 - 4 hours
 --------------------------------------------------------------
 As a team ::
 - Finished UML diagram for the game apparatus itself (not the AI part)
 - created plan for incremental development
 - started the non-dynamic parts of the game apparatus (Grid, DotCluster classes)
 ==============================================================


 2022-01-17 - 3 hours
 --------------------------------------------------------------
 As a team ::
 - Started Woo.java
 - creation of a checkWin and turn methods.
 - modified grid toString so that row numbers and column numbers are printed along with
 the grid itself.
 - created addDot method to add dot into specified grid position while checking
    if the dot's input position violates any game rules.
==============================================================


2022-01-18 - In class 0.5 hours and 1.5 hours after school
--------------------------------------------------------------
 As a team ::
 - Created explode method for when a box reaches the maximum number of dots.
 - The explode method explodes only into neighboring boxes that exist by using if statements to check for this.
 - The explode method invokes the addDot method, which checks for explode conditions, which means we also have
  functional chain reaction explosion output.
 - Tweaked checkWin for unintended wins (for example, after the first player's move)
 - separated runGame() and turn() methods for less complicated code
 - Found 2 sizable errors:
    - maxDot isn't set to 3 on horizontal edges (patched)
    - There needs to be some sort of queue in the case that two explosions occur at the same time and affect the same dotCluster
==============================================================

    
2022-01-19 - In class 0.5 hours and 2 hours after school
--------------------------------------------------------------
  Nora :: Set up basic groundwork/functionality for the explodeQueue
  Ziying :: Set up basic groundwork for method to force the user to wait()
  Gloria :: Set up basic groundwork for code to reset screen after each turn
  As a team ::
  - to address the issue of multiple explodes simultaneously affecting the same box, we set up an explodeQueue
  - explodeQueue queues explodes to execute one by one using an array list of integer arrays representing coordinates.
  - explode() no longer invokes addDot, but instead just adds 1 more to the numDot of surrounding dot clusters to avoid simulatneous explosion issue
  - fiddled around with wait timers and clearing screen after each turn
  - Found more bugs:
      - some issues, probably with color reset, that make some dotClusters unavailable to the player even though they should be available
==============================================================
      
2022-01-20 - In class 0.5 hours and 2 hours after school
--------------------------------------------------------------
 Ziying & Nora :: Worked on compeleting the flow chart
 As a team:
 - Incorporated checkWin() successfully

2022-01-21
--------------------------------------------------------------
<Member> :: <Thing member did.>
<Member> :: <Thing member did.>
<Member> :: <Thing member did.>
==============================================================
