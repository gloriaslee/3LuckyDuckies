3 Lucky Duckies
Ziying Jian
Gloria Lee
Nora Miller
pd 8
---------------------
Chain Reaction

 Qs:
 - What was the cause of the error setting maxDots for Grid boxes in the top and bottom rows?
 - How do try-catch loops work exactly?
 - What is considered "clean code"? And how can we best and most efficiently clean up?
 - How is this being graded?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Catching exceptions in user input using a try-catch loop
SOLVED BY: Used a while(true) loop around the try-catch loop, which the try part breaks out of 
and the catch part does not. Had the catch part read new user input. 
LEARNED: Be patient with try-catch loops - it may take very long to 
do enough trial and error to fix them. 

* Stack Overflow errors on a 3x3 grid
SOLVED BY: Added checkWin() to check after every explosion instead of until
all the explosions have ended.
LEARNED: Take a breath to stop coding. After a trace, we discovered
that a 3x3 grid is too small and the reactions would kept going nonstop, no
matter what we had done.
Had we kept trying to tackle the issue head on without stopping to trace,
we would not have completed the project.

* Fixed the bug with setting up maxDots for grid boxes at the very top and very bottom
SOLVED BY: Added a for loop in Grid(rows, columns) that does this explicitly
LEARNED: Coding is sometimes a bit like medicine - you don't always need to 
know the mechanism of what went wrong to fix it. Start by narrowing the length 
of code where the error could have occurred until you're down to a few lines of code, and replace the 
functionality of that area. 

* Fixed a bug where you couldn't place a dot in a previously exploded spot
SOLVED BY: Ensuring that colors are reset when the number of dots goes down to 0

* (Several times) Array out of bounds
SOLVED BY: Paying close attention to exactly what happened prior to the error - 
what did we try to add at too high or low an index?
LEARNED: To fix errors involving arrays of arrays, and ArrayLists of arrays
much more quickly


UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Our code struggles with computing large number of chain reactions.
After the reactions, dots may be misplaced.

* How to implement some kind of border frame our
game?

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Discovered terminal colors
* Creating a grid

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Addition of a queue for explosions (to deal with simultaneous explosions affecting the same dot)
* Moved checkWin to Grid, not Game, in order to check whether the game should end after 

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tales of wisdom gained...
* While we normally think of the the try-catch loop as being for errors that would cause exceptions, another way of 
  thinking about it (at least with regards to user input) is that these are often the user errors that affect the type 
  of the input. 
* Pay attention to which class particular methods need to be in, both in terms of access and in terms of what makes sense. 
  If you find you're changing the access keywords in ways that don't make intutitve sense, there probably exists a cleaner 
  way of fixing your access issue than you are currently pursuing. 
* Beware of the perils of try-catch loops!
* Some types of exceptions should strike much more terror in your heart than than others - IndexOutOfBounds exceptions are really
  small potatoes compared to StackOverflow or ConcurrentModification exceptions


 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
==============================================================


2022-1-13 - In class 0.5 hours and 2 hours after school
 --------------------------------------------------------------
 As a team :: 
 - Brainstormed final project ideas
 - Wrote up project proposal for googform
 Gloria :: Typed and submitted googform
 ==============================================================


2022-1-14 - 1.5 hours
 --------------------------------------------------------------
 Nora :: 
 - Started UML diagrams for the game
 ==============================================================


 2022-01-16 - 4 hours
 --------------------------------------------------------------
 As a team ::
 - Finished UML diagrams for the game apparatus itself (not the AI part), and a brief outline of what to do next
 - created plan for incremental development
 - started the non-dynamic parts of the game apparatus (Grid, DotCluster classes)
 ==============================================================


 2022-01-17 - 3 hours
 --------------------------------------------------------------
 As a team ::
 - Started Woo.java
 - creation of checkWin() and turn() methods.
 - modified Grid.toString() so that row numbers and column numbers are printed along with
 the grid itself.
 - created addDot() method to add dot into specified grid position while checking
    if the dot's input position violates any game rules.
==============================================================


2022-01-18 - In class 0.5 hours and 1.5 hours after school
--------------------------------------------------------------
 As a team ::
 - Created explode method for when a box reaches the maximum number of dots.
 - The explode method explodes only into neighboring boxes that exist by using if statements to check for this.
 - The explode method invokes the addDot method, which checks for explode conditions, which means we also have
  functional chain reaction explosion output.
 - Tweaked checkWin for unintended wins (for example, after the first player's move)
 - separated runGame() and turn() methods for less complicated code
 - Found 2 sizable errors:
    - maxDot isn't set to 3 on horizontal edges (patched)
    - There needs to be some sort of queue in the case that two explosions occur at the same time and affect the same dotCluster
==============================================================


2022-01-19 - In class 0.5 hours and 4 hours after school
--------------------------------------------------------------
  Nora :: Set up and compiled basic groundwork/functionality for the explodeQueue
  Ziying :: Set up basic groundwork for method to force the user to wait()
  Gloria :: Set up basic groundwork for code to reset screen after each turn
  As a team :: v3 created
  - to address the issue of multiple explodes simultaneously affecting the same box, we set up an explodeQueue
  - explodeQueue queues explodes to execute one by one using an array list of integer arrays representing coordinates.
  - explode() no longer invokes addDot, but instead just adds 1 more to the numDot of surrounding dot clusters to avoid simulatneous explosion issue
  - fiddled around with wait timers and clearing screen after each turn
  Ziying & Nora ::
  - Played a round and found more bugs:
      - some issues, probably with color reset, that make some dotClusters unavailable to the player even though they should be available
  Nora :: Drafted flowchart
==============================================================

2022-01-20 - In class 0.5 hours and 2 hours after school
--------------------------------------------------------------
 Ziying & Nora :: Worked on compeleting the flow chart
 As a team:
 - Incorporated checkWin() successfully
 - Tried to set up scanner loop to try catch errors for non Integer input
  during each turn and take alternate input if necessary.
  ==============================================================


  2022-01-21 - In class 0.5 hours
  --------------------------------------------------------------
  As a team: created v4
  - Set up additional checks for coordinate input that would be out of bounds
  for the current array size.
  - Figured out how to make a scanner loop work with try catch statements,
  looping whenever an error is caught.
  ==============================================================

  2022-01-22 - 1 hour
  --------------------------------------------------------------
  Gloria :: Created v5
  Worked on fixing a bug with the Scanner loop. Figured out
  how to user scanner.nextLine() in order to get past the error
  that the try/catch statement would have caught.
  - Worked on fixing a bug with the while/if statements that catch array out
  of bounds error
  ==============================================================

  2022-01-23 - 3 hours
  --------------------------------------------------------------
  Gloria :: Continued working on scanner bug. Moved the checks for array out of bounds
  and the check for dot color/box color into the while(true) loop for more effishient error check.

  Gloria and Ziying :: User can now also input RESET to reset their inputted coordinates
  if they want to take back their initial input.
  Added screen clearing to the code. Now with each turn, screen is cleared to make output cleaner.
  Used Text.java to make our code in Game.java and Grid.java cleaner.
  Tried to figure out how to display a border in the terminal to distinguish each turn.

  Nora: Finalized devlog
  ==============================================================
